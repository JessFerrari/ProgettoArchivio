

//struttura dei dati da memorizzare nella tabella hash
typedef struct {
  int valore;
  ENTRY *next;
} coppia;

// Testa della hash table
ENTRY *testa_lista_entry = NULL;


//creo un oggetto della hash table
ENTRY *crea_entry(char *s){
  ENTRY *e = malloc(sizeof(ENTRY));
  if(e==NULL) termina("errore malloc entry 1");
  e->key = strdup(s); // salva copia di s
  e->data = malloc(sizeof(coppia));
  if(e->key==NULL || e->data==NULL)
    termina("errore malloc entry 2");
  // inizializzo coppia
  coppia *c = (coppia *) e->data;
  c->valore = 1;
  c->next = NULL;
  return e;
}

//distruggo oggetto della hash table
void distruggi_entry(ENTRY *e){
  free(e->key); 
  free(e->data); 
  free(e);
}


void aggiungi(char *s){
  ENTRY *e = crea_entry(s);
  ENTRY *r = hsearch(*e,FIND);
  if(r==NULL) {
    r = hsearch(*e,ENTER);
    if(r==NULL) termina("errore o tabella piena");
    coppia *c = (coppia *) e->data;
    // inserisco in testa
    c->next = testa_lista_entry;
    testa_lista_entry = e;
  } else {
    // la stringa è gia' presente
    assert(strcmp(e->key,r->key)==0);
    coppia *d = (coppia *) r->data;
    d->valore +=1;
    distruggi_entry(e);
  }
}

int conta(char *s){
  //cerco s nella tabella hash
  ENTRY *e = crea_entry(s);
  ENTRY *r = hsearch(*e,FIND);
  if(r==NULL) return 0;
  coppia *c = (coppia *) e->data;
  int conto = c->valore;
  distruggi_entry(e);
  return conto;
}


  //creazione della hash table
  int ht = hcreate(Num_elem);
  if( ht == 0 ) {
      termina("Errore creazione HT");
  }


  //distruggo la hash table
  hdestroy();

  /*restituisce sulla linea di comando due interi :
    - r : che indica il numero di di thread lettori che eseguono l'operazione conta
    - w : che indica il numero di thread scrittori che eseguono l'operazione aggiungi
  */ 
  return 0;


void termina(const char *s) {
  fprintf(stderr,"%s\n",s);
  exit(1);
}

---------------------------------------
LETTORI

//Funzione lettore
void *lettore_body(void *arg){
    //recupero i dati
    datiLettori *dl = (datiLettori *) arg;
    fprintf(stdout, "Lettore %d partito:\n", dl->id);

    char *parola;
    int np = 0;

    do{
        fprintf(stdout,"[INDEX LETTORE %d] : %d\n", dl->id, *(dl->index)%PC_buffer_len);
        //faccio la sem wait sul semaforo dei dati (sto per togliere un dato quindi se è 0 aspetterò)
        xsem_wait(dl->sem_data_items, __LINE__, __FILE__);
        //per leggere una parola dal buffer devo acquisire la mutex
        xpthread_mutex_lock(dl->mutex, QUI);
        parola = dl->bufflet[*(dl->index) % PC_buffer_len];
        //parola = dl->bufflet[*(dl->index)];
        //fprintf(stdout, "LETTORE %d, INDEX %d, PAROLA %s\n", dl->id, *(dl->index), parola);
        *(dl->index) += 1;
        //rilascio la mutex
        xpthread_mutex_unlock(dl->mutex, QUI);
        //ho liberato un posto nel buffer e quindi faccio la post
        xsem_post(dl->sem_free_slots, __LINE__, __FILE__);
        np++;

        //devo poi contare la parola dalla tabella hash

    }while(parola != NULL);

    fprintf(stdout, "LETTORE %d HA LETTO %d PAROLE\n", dl->id, np);
    pthread_exit(NULL);
}

//Funzione capo lettore
void *capo_lettore_body(void *arg){
    //recupero i dati
    datiCapoLettore *cl = (datiCapoLettore *) arg;
    fprintf(stdout, "CAPO LETTORE PARTITO\n");

    //inizializzo i dati per gli lettori
    pthread_mutex_t mutexL = PTHREAD_MUTEX_INITIALIZER;
    pthread_t tL[*(cl->numero_lettori)];
    datiLettori dl [*(cl->numero_lettori)];
    int indexL = 0;

    //creo i thread lettori
    for(int i=0; i<*(cl->numero_lettori); i++){
        dl[i].bufflet = cl->bufflet;
        dl[i].index = &indexL;
        dl[i].sem_free_slots = cl->sem_free_slots;
        dl[i].sem_data_items = cl->sem_data_items;
        dl[i].mutex = &mutexL;
        dl[i].id = i;
        xpthread_create(&tL[i], NULL, lettore_body, dl+i, __LINE__, __FILE__);
    }

    //apro la pipe capolet in lettura
    int fd = open("capolet", O_RDONLY);
    if(fd==-1){
        xtermina("[PIPE] Errore apertura capolet.\n", __LINE__, __FILE__);
    } 

    //dati per leggere dalla pipe
    int size = 10;
    char *input_buffer = malloc(size * sizeof(char));
    if(input_buffer==NULL){
        xtermina("[MALLOC] Errore allocazione memoria", __LINE__, __FILE__);
    }
    size_t bytes_letti;

    //leggo dal buffer
    int np = 0;
    while(true){
        //leggo la dimensione della sequenza di bytes
        bytes_letti = read(fd, &size, sizeof(int));
        if(bytes_letti==0){
            printf("FIFO chiusa in lettura\n");
            break;
        }
        if(bytes_letti != sizeof(int)){
            perror("Errore nella lettura della lunghezza della sequenza di byte");
            break;
        }

        //realloco il buffer con la dimensione giusta
        input_buffer = realloc(input_buffer, size * sizeof(char));
        if(input_buffer==NULL){
            xtermina("[REALLOC] Errore allocazione memoria", __LINE__, __FILE__);
        }

        //leggo la sequenza di n byte
        bytes_letti = read(fd, input_buffer, size);
        if(bytes_letti==0){
            printf("FIFO chiusa in scrittura\n");
            break;
        }
        if(bytes_letti != size){
            perror("Errore nella lettura della sequenza di byte");
        }

        //aggiungo 0 alla fine della stringa
        input_buffer[bytes_letti] = 0x00; 
        input_buffer[bytes_letti+1] = '\0';

        //tokenizzo la stringa
        char *copia;
        char *token = strtok(input_buffer, ".,:; \n\r\t");
        while(token != NULL){
            copia = strdup(token);
            //aggiungo copia al buffer
            //faccio la wait sugli slot liberi, devo aggiungere, quindi se il buffer è pieno aspetto
            xsem_wait(cl->sem_free_slots, __LINE__, __FILE__);
            if(copia != NULL){
                cl->bufflet[*(cl->index) % PC_buffer_len] = copia;
                //cl->bufflet[*(cl->index)] = copia;
                *(cl->index) += 1;
                fprintf(stdout, "BUFFER[%d] : %s\n", *(cl->index)%PC_buffer_len, cl->bufflet[*(cl->index)%PC_buffer_len]);
            }
            //faccio la post sul sem dei dati in quanto ne ho aggiunto uno
            xsem_post(cl->sem_data_items, __LINE__, __FILE__);

            np++;
            token = strtok(NULL, ".,:; \n\r\t");
        }

    }

    fprintf(stdout, "CAPO LETTORE HA SCRITTO %d PAROLE\n", np);

    

    fprintf(stdout, "\n Prima di terminare i lettori l'indice è %d\n\n", *(cl->index)%PC_buffer_len);
    //termino i lettori aggiungendo null nel buffer
    for(int i=0; i<*(cl->numero_lettori); i++){
        xsem_wait(cl->sem_free_slots, __LINE__, __FILE__);
        cl->bufflet[*(cl->index) % PC_buffer_len] = NULL;
        //cl->buffsc[*(cl->index)] = NULL;
        *(cl->index) += 1;
        fprintf(stdout, "BUFFER LET[%d] : %s\n", *(cl->index)%PC_buffer_len, cl->bufflet[*(cl->index)%PC_buffer_len]);
        xsem_post(cl->sem_data_items, __LINE__, __FILE__);
    }

    //aspetto i thread lettori
    for (int i=0; i<*(cl->numero_lettori); i++){
        pthread_join(tL[i], NULL);
    }
    pthread_mutex_destroy(&mutexL);

    close(fd);
    pthread_exit(NULL);

}